@using Epidi.Models.ViewModel.MarkupRuleVsUserId;
@model MarkupRuleVsUserId
@{
    Layout = "~/Views/Shared/_MainLayout.cshtml";
    ViewBag.PageTitle = "MarkupRule Vs UserId";
    ViewBag.Method = "MarkupRule Vs UserId";
}
<style>
    .error{
        color: #e73d4a;
    }

    select#MarkUpRuleId {
        color: black !important;
    }

    select#UserId {
        color: black !important;
    }
</style>
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">MarkupRule Vs UserId</h3>
            </div>
            <div class="col-12">
                <br />
                <button id="btnAddTradeTiming" type="button" onclick="OpenMarkupRuleVsUserIdModal()" class="btn btn-success float-right">
                    <i class="fa fa-plus"></i> Add MarkupRule Vs UserId
                </button>
            </div>
            <!-- /.card-header -->
            <div class="card-body">
                <table id="MarkupRuleVsUserIdList" class="table table-bordered table-striped">
                </table>
            </div>
            <!-- /.card-body -->
        </div>
        <!-- /.card -->
    </div>
</div>

<div class="modal mappingmodal" tabindex="-1" role="dialog" id="btnMarkupRuleVsUserIdModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">MarkupRule Vs UserId</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form id="MarkupRuleVsUserIdForm" method="post" enctype="multipart/form-data">
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-12 form-group">
                        <input type="hidden" id="hdnId" value="" />
                            <label>Users</label>
                        @*@Html.LabelFor(model => model.MasterInstrumentalName, "Master Instrumental Name")*@
                            @Html.DropDownListFor(model => model.UserId, new SelectList(ViewBag.UsersList, "Value", "Text", Model.UserId), "-- Select User --", new { @class = "form-control" ,@name="UserName" })
                    </div>
                    <div class="col-md-12 form-group">
                        <input type="hidden" id="hdnId" value="" />
                            <label>Users</label>
                        @*@Html.LabelFor(model => model.MasterInstrumentalName, "Master Instrumental Name")*@
                            @Html.DropDownListFor(model => model.MarkUpRuleId, new SelectList(ViewBag.QuoteMarkUpRuleList, "Value", "Text", Model.MarkUpRuleId), "-- Select Rule --", new { @class = "form-control" ,@name="QuoteMarkUpRuleName" })
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                    <input id="btnSave" type="submit" class="btn btn-primary saveBtn" value="Save" />
                    <button class="btn btn-primary loading" type="button" disabled style="display:none;float:right;">
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        Saving...
                    </button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
            </form>
        </div>
    </div>
</div>


@section Scripts{
    <script>

        $(document).ready(() => {

            MarkupRuleVsUserIdDataTable.init();

            $("#MarkupRuleVsUserIdForm").validate({
                rules: {
                    UserId: "required",
                    MarkUpRuleId: "required",
                },
                messages: {
                    UserId: {
                        required: "Please select User",
                    },
                    MarkUpRuleId: {
                        required: "Please select Rule",
                    },
                },

                errorPlacement: function (error, element) {
                    if (element.is(":radio")) {
                        error.appendTo(element.parents(".form-group"));
                    } else {
                        // This is the default behavior
                        error.insertAfter(element);
                    }
                },
                submitHandler: function (form) {
                    AddEditMarkupRuleVsUserIdTiming();
                }
            });
        });
        function OpenMarkupRuleVsUserIdModal() {
            ResetValues();
            var $alertas = $('#btnMarkupRuleVsUserIdModal');
            $alertas.validate().resetForm();
            $alertas.find('.error').removeClass('error');
            $('.mappingmodal').modal('show');
        }
        function AddEditMarkupRuleVsUserIdTiming() {
            var hdnId = $('#hdnId').val()
            if (hdnId > 0)
            {
                EditMarkupRuleVsUserId();
            }
            else
            {
                AddMarkupRuleVsUserId();
            }
        }

        function AddMarkupRuleVsUserId() {
            var markupRuleVsUserId = {};
            markupRuleVsUserId.Id = $('#hdnId').val();
            markupRuleVsUserId.UserId = $('#UserId').val();
            markupRuleVsUserId.MarkUpRuleId = $('#MarkUpRuleId').val();
            
            $.ajax({
                type: "POST",
                url: '/MarkupRuleVsUserId/AddMarkupRuleVsUserId',
                data: { markupRuleVsUserId },
                success: function (data) {
                    $('.mappingmodal').modal('hide');
                    MarkupRuleVsUserIdDataTable.init();
                    alert('Data Saved !!');
                    
                }
            });
        }

        function EditMarkupRuleVsUserId() {
            var markupRuleVsUserId = {};
            markupRuleVsUserId.id = $('#hdnId').val();
            markupRuleVsUserId.userId = $('#UserId').val();
            markupRuleVsUserId.markUpRuleId = $('#MarkUpRuleId').val();
            $.ajax({
                type: "POST",
                url: '/MarkupRuleVsUserId/EditMarkupRuleVsUserId',
                data: { markupRuleVsUserId },
                success: function (data) {
                    $('.mappingmodal').modal('hide');
                    MarkupRuleVsUserIdDataTable.init();
                    alert('Record Updated !!');
                    
                }
            });
        }
        function DeleteMarkupRuleVsUserId(obj) {
            var ID=$(obj).closest('tr').find('input[type="hidden"]')
            if(confirm('Are you sure you want to delete this record')){
                $.ajax({
                type: "POST",
                    url: '/MarkupRuleVsUserId/DeleteMarkupRuleVsUserId',
                data: ID,
                success: function (data) {
                        MarkupRuleVsUserIdDataTable.init();
                        alert('Record Deleted !!');
                }
            });
            }
        }
        function GetMarkupRuleVsUserIdById(obj) {
            
            $('.mappingmodal').modal('show');

            var ID = $(obj).closest('tr').find('input[type="hidden"]')
            $.ajax({
                type: "POST",
                url: '/MarkupRuleVsUserId/GetMarkupRuleVsUserIdById',
                data: ID,
                success: function (data) {
                    $('#hdnId').val(data.id);
                    $('#UserId').val(data.userId);
                    $('#MarkUpRuleId').val(data.markUpRuleId);
                }
            });
        }

        function ResetValues()
        {
            $('#hdnId').val(0);
            $('#UserId').val('');
            $('#MarkUpRuleId').val('');
        }
        var MarkupRuleVsUserIdDataTable = function () {
            let initTable1 = function () {
                let table = $('#MarkupRuleVsUserIdList');

                let oTable = table.dataTable({
                    "stateSave": true,
                    "autoWidth": false,
                    "paging": true,
                    // Internationalisation. For more info refer to http://datatables.net/manual/i18n
                    "language": {
                        "aria": {
                            "sortAscending": ": activate to sort column ascending",
                            "sortDescending": ": activate to sort column descending"
                        },
                        "emptyTable": "No data available in table",
                        "info": "Showing _START_ to _END_ of _TOTAL_ entries",
                        "infoEmpty": "No entries found",
                        "infoFiltered": "(filtered1 from MAX total entries)",
                        //"lengthMenu": "MENU entries",
                        "search": "Search:",
                        "zeroRecords": "No matching records found"
                    },
                    "pageLength": 10,
                    "processing": true,
                    "serverSide": true,
                    "ajax": {
                        async: false,
                        url: '/MarkupRuleVsUserId/MarkupRuleVsUserId_All',
                        type: "post",
                    },
                    "columns": [

                        {
                            "title": "User Name", "data": "userName", "orderable": false, "width": "3%"
                        },
                        {
                            "title": "Rule", "data": "name", "orderable": false, "width": "3%"
                        },
                        {
                            "title": "Action", "data": "id",
                            "render": function (data, type, row) {
                                let htmlData = "";

                                htmlData += '<input type="hidden" value='+row['id']+' />'
                                htmlData += `<button title="Edit" class="btn btn-sm btn-success mr-1" onclick="GetMarkupRuleVsUserIdById($(this));"><i class="fa fa-edit"></i></button>`;
                                htmlData += `<button title="Delete" class="btn btn-sm btn-danger mr-1" onclick="DeleteMarkupRuleVsUserId($(this));"><i class="fa fa-trash"></i></button>`;
                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                    ],

                    // setup responsive extension: http://datatables.net/extensions/responsive/
                    responsive: true,

                    "lengthMenu": [
                        [5, 10, 15, 20, 1000],
                        [5, 10, 15, 20, 1000] // change per page values here
                    ],
                    // set the initial value

                    //"dom": "<'row' <'col-md-12'B>><'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r><'table-scrollable't><'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>", // horizobtal scrollable datatable

                    // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
                    // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js).
                    // So when dropdowns used the scrollable div should be removed.
                    //"dom": "<'row' <'col-md-12'T>><'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",
                });
            }

            return {
                init: function () {
                    if ($.fn.DataTable.isDataTable("#MarkupRuleVsUserIdList")) {
                        $('#MarkupRuleVsUserIdList').dataTable().fnDestroy();
                        //$('#divUserTable').html('<table class="table table-striped" width="100%" id="UserTable"></table>');
                    }
                    initTable1();
                }
            };
        }();

    </script>
}

