@model InstrumentSpecificationRule
@{
    Layout = "~/Views/Shared/_MainLayout.cshtml";
    ViewBag.Method = "Edit Instruments Specification";

    ViewBag.DetailName = "Instruments Specification"; 
    ViewBag.DetailURL = "/ImportInstruments/Index";
    
   

    
}

<style>
    /* Chrome, Safari, Edge, Opera */
    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    /* Firefox */
    input[type=number] {
        -moz-appearance: textfield;
    }

    .select2-container {
        display: block;
    }

    h3 {
        color: #dc3545 !important;
        font-weight: bold;
    }

    table {
        border-collapse: collapse;
        width: 100%;
    }

    th, td {
        text-align: left;
        padding: 8px;
    }

    tr:nth-child(even) {
        background-color: #f2f2f2;
    }


    .progress {
        display: block;
        position: relative;
        margin: 20px;
        width: 425px;
        background-color: #ddd;
        border: 1px solid blue;
        padding: 1px;
        left: 40px;
        border-radius: 3px;
    }



    .percent {
        position: absolute;
        display: inline-block;
        color: #fff;
        font-weight: bold;
        top: 100%;
        left: 50%;
        margin-top: -9px;
        margin-left: -20px;
        -webkit-border-radius: 4px;
    }



    .bar {
        background-color: #007bff;
        width: 0%;
        height: 30px;
        border-radius: 4px;
        -webkit-border-radius: 4px;
        -moz-border-radius: 4px;
    }



    #status {
        margin: 20px;
        color: #008000;
        font-size: 16px;
    }



</style>

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <div class="row">
                    <div class="col-12">
                        <h3>Specification Rule</h3>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-3">
                        <div class="form-group">
                            <input type="hidden" id="rulesCondtionData" />
                            <input type="hidden" id="instrumentData" />
                            @Html.HiddenFor(model => model.Id,"Id")
                            @Html.LabelFor(model => model.Comment, "Comment")
                            @Html.TextBoxFor(p => p.Comment, new { @class = "form-control", @placeholder = "Comment" ,@name="Comment"})
                        </div>
                    </div>
                    <div class="col-3">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Priority, "Priority")
                            @Html.TextBoxFor(p => p.Priority, new { @class = "form-control", @placeholder = "Priority" ,@name="Priority"})

                        </div>
                    </div>
                    <div class="modal-footer">
                        <button onclick="SaveSpecificationRuleData();" class="btn btn-primary">Save</button>
                    </div>
                </div>
                @*<div>
                @if (Model.objRuleConditionViewModel != null && Model.objRuleConditionViewModel.conditionRulesDtlObj != "")
                {
                <input type="hidden" id="ruleconditionjson" value="@Model.objRuleConditionViewModel.conditionRulesDtlObj" />
                }
                </div>*@
                <div class="row">
                    <div class="col-12">
                        @using (Html.BeginForm("UploadMasterInstrumentsExcel", "ImportInstruments", FormMethod.Post, new { enctype = "multipart/form-data", id = "frmQuoteMarkUpExcelForm" }))//onsubmit = "return myFunction()"
                        {
                            @Html.HiddenFor(model => model.Id,"Id")
                            <div class="row">
                                @if (Model.objRuleConditionViewModel != null && Model.objRuleConditionViewModel.conditionRulesDtlObj != "")
                                {
                                    <input type="hidden" id="ruleconditionjson" value="@Model.objRuleConditionViewModel.conditionRulesDtlObj" />
                                }
                                <div class="col-4" id="divUploadFile">
                                    <div class="custom-file form-group" style="width:270px">
                                        <input type="file" id="FileUpload" name="FileUpload" class="custom-file-input">
                                        <label id="lblRule" class="custom-file-label" style="text-align:left" for="file">Choose MasterInstruments</label>
                                    </div>
                                </div>
                                <div class="col-3">
                                    <button type="submit" id="importToExcel" class="form-group btn btn-info">Import MasterInstruments</button>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="col-6">
                        <a onclick="ExportSepecificationRuleData(@Model.Id)" class="btn btn-info form-group float-sm-left mr-3">Export MasterInstruments</a>
                    </div>
                </div>
                <div id="accordion">
                    <div class="card card-info">
                        <div class="card-header">
                            <h3 class="card-title w-100">
                                <a class="d-block w-100 collapsed" data-toggle="collapse" href="#collapseOne" aria-expanded="false">
                                    Instrument Rules
                                </a>
                            </h3>
                        </div>
                        <div id="collapseOne" class="collapse show" data-parent="#accordion" style="overflow:auto">
                            <div class="card-body">
                                <input type="hidden" id="hdnTradeStatusOptionData"></>
                                <div id="DivInstrument">
                                    <table id="tblInstrument">
                                        <thead>
                                            <tr>
                                            <th>tradeId</th>
                                            <th>symbolGroupId</th>
                                            <th>#</th>
                                            <th>Instrument Name</th>
                                            <th>Symbol Group</th>
                                            <th>TTFrom</th>
                                            <th>TTTo</th>
                                            <th>QTFrom</th>
                                            <th>QTTo</th>
                                            <th>Trade Status</th>
                                            <th>Average Spread</th>
                                            <th>Decimals</th>
                                            <th>Symbol Denomination</th>
                                            <th>Unit Description</th>
                                            <th>Zeros To be Grouped</th>
                                            <th>Image</th>
                                            <th>Action</th>
                                        </tr>
                                        </thead>
                                        <tbody></tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                        @*<div class="row mt-2 mr-1">
                            <div class="col-12">
                                <div class="float-right">
                                    <nav aria-label="...">
                                        <ul class="pagination">
                                            <li class="page-item disabled">
                                                <span class="page-link">Previous</span>
                                            </li>
                                            <li class="page-item"><a class="page-link" href="#">1</a></li>
                                            <li class="page-item active">
                                                <span class="page-link">
                                                    2
                                                    <span class="sr-only">(current)</span>
                                                </span>
                                            </li>
                                            <li class="page-item"><a class="page-link" href="#">3</a></li>
                                            <li class="page-item">
                                                <a class="page-link" href="#">Next</a>
                                            </li>
                                        </ul>
                                    </nav>
                                </div>
                            </div>
                        </div>*@
                    </div>

                    <div class="card card-info">
                        <div class="card-header">
                            <h4 class="card-title w-100">
                                <a class="d-block w-100" data-toggle="collapse" href="#collapseThree">
                                    Rule Condition
                                </a>
                            </h4>
                        </div>
                        <div id="collapseThree" class="collapse" data-parent="#accordion">
                            <div class="card-body">
                                <div class="col-12">
                                    <div class="row" id="divRuleDetails">
                                        <input id="objRuleConditions_Dtl_Id_0" type="hidden" class="form-control">
                                        <input id="objRuleConditions_Id_0" type="hidden" class="form-control">
                                        <div class="col-4">
                                            <div class="form-group">
                                                <label>Fields Name</label>
                                                @if (Model.objRuleConditionViewModel != null && Model.objRuleConditionViewModel.conditionRulesDtlObj != "")
                                                {
                                                    <input type="hidden" id="ruleconditionjson" value="@Model.objRuleConditionViewModel.conditionRulesDtlObj" />
                                                }
                                                <select id="FieldName_0" name="FieldName_0" class="form-control" onchange="FieldsNameOnChange(0);">
                                                    @* @foreach (var filed in ViewBag.UserFieldsList)
                                                    {
                                                    <option value="@filed.Value">@filed.Text</option>
                                                    }*@
                                                </select>
                                            </div>
                                        </div>
                                        <div class="col-4">
                                            <div class="form-group">
                                                <label>Operation</label>
                                                <select id="Opration_0" name="Opration" class="form-control"></select>
                                            </div>
                                        </div>
                                        <div class="col-4" id="ddlOprationValue_0">
                                            <div class="form-group">
                                                <label>Operation Value</label>
                                                <input type="text" id="OprationValue_0" name="OprationValue_0" class="form-control" placeholder="Operation Value" />
                                                @*@Html.TextBoxFor(p => p.OprationValue, new { @class = "form-control", @placeholder = "Opration Value"
                                                ,@name="OprationValue",Id = "OprationValue_0"})*@
                                            </div>
                                        </div>
                                        <div class="col-4" id="ddlOprationValueTemp_0" style="display:none;">
                                            <div class="form-group">
                                                <label>Operation Value</label>
                                                <select id="OprationIdTemp_0" name="OprationIdTemp" onchange="ddlOprationValueTempOnChange(0)" class="form-control"></select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row col-12 mt-1">
                                        @*style="float: right;"*@
                                        <div class="form-group">
                                            <button type="button" onclick="AddNewRuleDtl();" id="addnewCondition" class="btn btn-primary">Add Condition</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-6">
                        <h3></h3>
                    </div>
                </div>

                <div class="row">
                    <div class="col-6">
                        <h3></h3>
                    </div>
                </div>

                <div class="card-header">
                    <div class="row">
                        <div class="col-6">
                            <h3></h3>
                        </div>
                    </div>

                </div>
            </div>
        </div>
        
    </div>
</div>



<div class="modal fade" id="ProcessModal">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title">
                    <h1>Processing...</h1>
                </div>
            </div>
            <div class="modal-body">
                <div class="col-6">
                    <div class="progress">
                        <div class="bar"></div>
                        <div class="percent">0%</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script src="~/js/jquery-validation/jquery.validate.min.js"></script>
    <script src="~/js/jquery-validation/additional-methods.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js"></script>
    <script src="~/js/specification_rule.js"></script>
    <script>

        $(document).ready(() => {
            debugger
            GetTradeStatusData();
            InstrumentDataTable.init();
             
            //GetSpecificationRuleInstrumentByRuleId(mainId);
            BindFiledNameDynamic(0);
            //BindIntruments("filter");
            if ($('#ruleconditionjson').val() != undefined) {
                var rulescondition = JSON.parse($('#ruleconditionjson').val());
                console.log("rulescondition -" + rulescondition);
                for (var i = 0; i < rulescondition.length; i++) {
                    if (i > 0) {
                        AddNewRuleDtl();
                        var fieldName = rulescondition[i].FieldName;

                        $("#FieldName_" + i).val(rulescondition[i].FieldName);
                        $("#Opration" + i).val(rulescondition[i].OprationValue);
                        $("#OprationValue_" + i).val(rulescondition[i].OprationValue);

                        $("#objRuleConditions_Dtl_Id_" + i).val(rulescondition[i].Id);
                        $("#objRuleConditions_Id_" + i).val(rulescondition[i].RuleConditionsId);

                        var opration = rulescondition[i].Opration;
                        var oprationValue = rulescondition[i].OprationValue;
                        BindFiledNameDynamic(i, fieldName, opration, oprationValue);
                    }
                    if (i == 0) {
                        BindFiledNameDynamic(i, rulescondition[i].FieldName, rulescondition[i].Opration, rulescondition[i].OprationValue);
                        $("#FieldName_" + i).val(rulescondition[i].FieldName);
                        FieldsNameOnChange(i, rulescondition[i].Opration);
                        $("#OprationValue_" + i).val(rulescondition[i].OprationValue);
                        //$("#OprationIdTemp_" + i).val(response.rulesDtlViewModel[i].oprationValue);
                        $("#objRuleConditions_Dtl_Id_" + i).val(rulescondition[i].Id);
                        $("#objRuleConditions_Id_" + i).val(rulescondition[i].RuleConditionsId);
                    }
                    $("#OprationValue_" + i).val(rulescondition[i].OprationValue);
                }

            }

            $('#FileUpload').on('change', function (e) {
                //get the file name
                var fileName = e.target.files[0].name;
                $(this).next('.custom-file-label').html(fileName);
            });
            
            $(document).on("submit", "#frmQuoteMarkUpExcelForm", function (e) {
                e.preventDefault();
                //BDMValidation();
                var form = $(this);
                form.ajaxSubmit({
                    beforeSubmit: function () {
                        if (!form.valid()) {

                            return false;
                        }
                        else {
                            $("#Loader").show();
                            return true;
                        }
                    },
                    success: function (res) {
                         $("#Loader").hide();
                        if (res.statusCode == 200) {
                            debugger;
                            NotifyMsg('success', res.message);

                        } else {
                            debugger;
                            NotifyMsg('error', res.message); 
                            //location.reload();
                        }
                        setTimeout(() => {  location.reload(); }, 3000);
                    },
                    Errors: function () {
                        $("#Loader").hide();
                        NotifyMsg('error', res.message);
                    }
                });
                return false;
            });
        });
        
        function AddRuleCondition(id) {
            var rulesCount = $('#divRuleDetails').children().length;
            rulesCount = rulesCount / 4;
            var rules = [];
            for (var i = 0; i < rulesCount; i++) {
                rules.push({ 'FieldName': $('#FieldName_' + i).val(), 'Opration': $('#Opration_' + i).val(), 'OprationValue': $('#OprationValue_' + i).val() });
            }
            var model = {};
            model.RuleId = id;
            model.conditionRulesDtlObj = JSON.stringify(rules);
            $.ajax({
                type: "POST",
                url: '/RuleCondition/SaveRuleCondition',
                data: { 'model': model },
                success: function (data) {
                    $('.mappingmodal').modal('hide');
                    alert('Data Saved !!');
                    window.location.href = '/QuoteMarkUpRule/Index';
                }
            });
        }
        function frmValidation() {

            $('#quoteMarkUpRuleForm').validate({
                rules: {
                    Name: {
                        required: true
                    }
                },
                messages: {
                    Name: "Please enter name"
                },
                errorElement: 'span',
                errorPlacement: function (error, element) {
                    error.addClass('invalid-feedback');
                    element.closest('.form-group').append(error);
                },
                highlight: function (element, errorClass, validClass) {
                    $(element).addClass('is-invalid');
                },
                unhighlight: function (element, errorClass, validClass) {
                    $(element).removeClass('is-invalid');
                }
            });
        }
        function BindFiledNameDynamic(count, defaultVal = "", defaultOp = "", defaultOpValue = "") {
            $.ajax({
                async: true,
                type: "POST",
                url: "@Url.Action("GetUserFieldsForDynamic","LeverageRules")",
                dataType: 'json',
                data: { tblName: 'Users' },
                success: function (response) {
                    $("#FieldName_" + count).append(`<option value="">--Select--</option>`)
                    for (var i = 0; i < response.length; i++) {
                        $("#FieldName_" + count).append(`<option value="${response[i].value}">${response[i].text}</option>`)
                    }
                    if (defaultVal != "") {
                        $("#FieldName_" + count).val(defaultVal);
                        FieldsNameOnChange(count, defaultOp, defaultOpValue);
                    }
                },
                error: function (errorTemp) {
                    console.log('error', errorTemp);
                }
            })
        }
        function FieldsNameOnChange(count, defaultValue = "", defaultOpValue = "") {

            $("#Opration_" + count).html("");
            var selectedVal = $("#FieldName_" + count).val();
            if (selectedVal != undefined) {
                const myArray = selectedVal.split("|");
                var FieldName = myArray[0];
                var DataType = myArray[1];
                var FkKey = myArray[2];

                $.ajax({
                    async: true,
                    type: "POST",
                    url: "@Url.Action("GetOprationDropDown","LeverageRules")",
                    data: { FieldsName: FieldName, DataType: DataType, FkKey: FkKey },
                    dataType: 'json',
                    success: function (response) {
                        $("#Opration_" + count).append(`<option value="">--Select--</option>`)
                        for (var i = 0; i < response.length; i++) {
                            $("#Opration_" + count).append(`<option value="${response[i].value}">${response[i].text}</option>`)
                        }

                        if (defaultValue != "") {
                            $("#Opration_" + count).val(defaultValue);
                        }

                        $("#ddlOprationValue_" + count).show();
                        $("#ddlOprationValueTemp_" + count).hide();
                        if (FkKey == "1") {
                            $("#ddlOprationValue_" + count).hide();
                            $("#ddlOprationValueTemp_" + count).show();
                            //}
                            $("#OprationIdTemp_" + count).html("");
                            $.ajax({
                                async: true,
                                type: "POST",
                                url: "@Url.Action("GetTempOprationDropDown","LeverageRules")",
                                data: { FieldsName: FieldName, DataType: DataType, FkKey: FkKey },
                                dataType: 'json',
                                success: function (responseTemp) {
                                    $("#OprationIdTemp_" + count).append(`<option value="">--Select--</option>`)
                                    for (var i = 0; i < responseTemp.length; i++) {
                                        $("#OprationIdTemp_" + count).append(`<option value="${responseTemp[i].value}">${responseTemp[i].text}</option>`)
                                    }
                                    if (defaultOpValue != "") {
                                        $("#OprationIdTemp_" + count).val(defaultOpValue);
                                    }
                                },
                                error: function (errorTemp) {
                                    console.log('error', errorTemp);
                                }
                            })
                        }
                    },
                    error: function (error) {
                        console.log('error', error);

                    }
                })
            }
        }
        ///Add New rule Dtl
        var countDetails = 0;
        function AddNewRuleDtl() {
            countDetails = countDetails + 1;
            $("#divRuleDetails").append(`
                                        <input id="objRuleConditions_Dtl_Id_${countDetails}" type="hidden">
                                        <input id="objRuleConditions_Id_${countDetails}" type="hidden">
                                    <div class="col-4" id="divField_${countDetails}">
                                        <div class="form-group">
                                        <label>Fields Name</label>
                                        <select id="FieldName_${countDetails}" class="form-control" onchange="FieldsNameOnChange(${countDetails});">
                                        </select>
                                        </div>
                                    </div>
                                    <div class="col-4" id="divOpration_${countDetails}">
                                        <div class="form-group">
                                        <label>Operation</label>
                                        <select id="Opration_${countDetails}" class="form-control">
                                        </select>
                                        </div>
                                    </div>
                                    <div class="col-4" id="ddlOprationValue_${countDetails}">
                                        <div class="form-group">
                                        <label>Operation Value</label>
                                        <input class="form-control" id="OprationValue_${countDetails}" placeholder="Operation Value" type="text" value="" style="width: 85%;display: inline;">
                                        <a href="javascript:void(0)" value="Delete" onclick="DeleteRule(${countDetails})"><i class="fa fa-trash" style="font-size: large;margin-top: 8px;margin-left: 10px" aria-hidden="true"></i></a>
                                        </div>
                                    </div>
                                    <div class="col-4" id="ddlOprationValueTemp_${countDetails}" style="display:none;">
                                        <div class="form-group">
                                            <label>Operation Value</label>
                                            <select id="OprationIdTemp_${countDetails}" name="OprationIdTemp" class="form-control" onchange="ddlOprationValueTempOnChange(${countDetails})" style="width: 85%;display: inline;"></select>
                                            <a href="javascript:void(0)" value="Delete" onclick="DeleteRule(${countDetails})"><i class="fa fa-trash" style="font-size: large;margin-top: 8px;margin-left: 10px" aria-hidden="true"></i></a>
                                        </div>
                                    </div>
                                    `);
            BindFiledNameDynamic(countDetails)
        };
        function AddNewLPPrio(count, RuleInstrumentId) {
            AddNewLPPrioJs(count, RuleInstrumentId);
        }
        function ddlOprationValueTempOnChange(cnt) {
            //OprationValue
            var selectOprationIdTemp = $("#OprationIdTemp_" + cnt).val();
            $("#OprationValue_" + cnt).val(selectOprationIdTemp);
        }
        function AddInstrumentRule() {
            GetInstrumentWithRuleLpInEditTable();
        }


        var InstrumentDataTable = function () {
            var ruleId = $('#Id').val();
            let initTable1 = function () {
                let table = $('#tblInstrument');


                let oTable = table.dataTable({
                    "stateSave": false,
                    "autoWidth": false,
                    "paging": true,
                    // Internationalisation. For more info refer to http://datatables.net/manual/i18n
                    "pageLength": 10,
                    "processing": true,
                    "serverSide": true,
                    "searching": true,
                    "ajax": {
                        async: false,
                        url: '/ImportInstruments/All_Import_MasterInstrument',
                        type: "post",
                        data: { Id: ruleId },
                    },
                    columnDefs:
                        [{
                            "targets": [0],
                            "visible": false,
                            "searchable": false
                        },
                        {
                            "targets": [1],
                            "visible": false,
                            "searchable": false
                        }],
                    "columns": [
                        {
                            "data": "tradeId", "name": "TradeId", "width": "3%",
                            "render": function (data, type, row) {
                                return convertToHtmlControl(row.tradeId, "TradeId");
                            }
                        },
                        {
                            "data": "symbolGroupId", "name": "SymbolGroupId", "width": "3%",
                            "render": function (data, type, row) {
                                return convertToHtmlControl(row.symbolGroupId, "SGI");
                            }
                        },
                        {
                            "data": "instrumentId", "name": "InstrumentId", "width": "3%",
                            "render": function (data, type, row) {
                                return convertToHtmlControl(row.instrumentId,"InstrumentId");
                            }
                        },
                        {
                            "data": "instrumentName", "name": "InstrumentName", "width": "3%",
                            "render": function (data, type, row) {
                                return convertToHtmlControl(row.instrumentName, "InstrumentName");
                            }
                        },
                        {
                            "data": "symbolGroup", "name": "SymbolGroup", "width": "3%",
                            "render": function (data, type, row) {
                                var strHtml = convertToHtmlControl(row.symbolGroup,"SymbolGroup");
                                strHtml += '<input name="SymbolGroupId" value="' + row.symbolGroupId + '" class="form-control" type="hidden">';
                                return strHtml;
                            }
                        },
                        {
                            "data": "ttFrom", "name": "TTFrom", "width": "3%",
                            "render": function (data, type, row) {
                                return convertToHtmlControl(row.ttFrom, "TtFrom");
                            }
                        },
                        {
                            "data": "ttTo", "name": "TTo", "width": "3%",
                            "render": function (data, type, row) {
                                return convertToHtmlControl(row.ttTo, "TTo");
                            }
                        },
                        {
                            "data": "qtFrom", "name": "QTFrom", "width": "3%",
                            "render": function (data, type, row) {
                                return convertToHtmlControl(row.qtFrom, "QtFrom");
                            }
                        },
                        {
                            "data": "qtTo", "name": "QTTo", "width": "3%",
                            "render": function (data, type, row) {
                                return convertToHtmlControl(row.qtTo, "QtTo");
                            }
                        },
                        {
                            "data": "tradeStatus", "name": "TradeStatus", "width": "3%",
                            "render": function (data, type, row) {
                                return convertToHtmlControl(row.tradeId, "TradeStatus");
                            }
                        },
                        {
                            "data": "averageSpread", "name": "AverageSpread", "width": "3%",
                            "render": function (data, type, row) {
                                return convertToHtmlControl(row.averageSpread, "AverageSpread");
                            }
                        },
                        {
                            "data": "decimals", "name": "Decimals", "width": "3%",
                            "render": function (data, type, row) {
                                return convertToHtmlControl(row.decimals, "Decimals");
                            }
                        },
                        {
                            "data": "symbolDenomination", "name": "SymbolDenomination", "width": "3%",
                            "render": function (data, type, row) {
                                return convertToHtmlControl(row.symbolDenomination, "SymbolDenomination");
                            }
                        },
                        {
                            "data": "unitDescription", "name": "UnitDescription", "width": "3%",
                            "render": function (data, type, row) {
                                return convertToHtmlControl(row.unitDescription, "UnitDescription");
                            }
                        },
                        {
                            "data": "zerosToBeGrouped", "name": "ZerosToBeGrouped", "width": "3%",
                            "render": function (data, type, row) {
                                return convertToHtmlControl(row.zerosToBeGrouped, "ZerosToBeGrouped");
                            }
                        },
                        {
                            "data": "logo", "name": "Logo", "width": "3%",
                            "render": function (data, type, row) {
                                return convertToHtmlControl(row.logo, "Logo");
                            }
                        },
                        {
                            "title": "Action", "data": "instrumentId",
                            "render": function (data, type, row) {
                                let htmlData = "";
                                htmlData += `<a href="javascript:void(0)" value="Delete" onclick="DeleteSpecificatonRuleInstrument(`+ ruleId +`,` + row.instrumentId +`)" style="height: calc(2.25rem + 2px); padding: 0.375rem 0.75rem;">`;
                                htmlData += `<i class="fa fa-trash" style="font-size: large;margin-top: 8px; margin-left: 10px;" aria-hidden="true"></i>`;
                                htmlData += `</a>`;
                                htmlData += `<a href="javascript:void(0)" value="Update" onclick="SaveSpecificatonRuleInstrument(this,`+ ruleId +`,` + row.instrumentId +`)" style="height: calc(2.25rem + 2px); padding: 0.375rem 0.75rem;">`;
                                htmlData += `<i class="fa fa-save" style="font-size: large;margin-top: 8px; margin-left: 10px;" aria-hidden="true"></i>`;
                                htmlData += `</a>`;
                                return htmlData;
                            }
                            , "width": "3%"
                        },
                    ],
                    // setup responsive extension: http://datatables.net/extensions/responsive/
                    //responsive: true,

                    "lengthMenu": [
                        [5, 10, 15, 20, 1000],
                        [5, 10, 15, 20, 1000] // change per page values here
                    ],
                });
            }

            return {
                init: function () {
                    if ($.fn.DataTable.isDataTable("#tblInstrument")) {
                        $('#tblInstrument').dataTable().fnDestroy();
                        //$('#divUserTable').html('<table class="table table-striped" width="100%" id="UserTable"></table>');
                    }
                    initTable1();
                }
            };
        }();

        function convertToHtmlControl(val,name)
        {
            var strHTML = "";
            if (name == "InstrumentId")
            {
                strHTML += '<div class="form-group">'
                strHTML += '<input id="" name="' + name + '" value="' + val + '" class="form-control" hidden>';
                strHTML += '</div>';
                strHTML +=  val;
            }
            else if (name == "InstrumentName" || name == "SymbolGroup") {
                strHTML += '<div class="form-group">'
                
                strHTML += '<input id="" name="' + name + '" value="' + val + '" class="form-control" readonly>';
                strHTML += '</div>';
            }
            //else if (name == "TtFrom" || name == "TTo" || name == "QTFrom" || name == "QTTo") {
            //    strHTML += '<div class="form-group">'
            //    strHTML += '<input id="" name="' + name + '" value="' + val + '" class="form-control" type="time" step="1" min="00:00" max="23:59">';
            //    strHTML += '</div>';
            //}
            else if (name == "TradeStatus") {
                
                var tradeStatusObj = JSON.parse($("#hdnTradeStatusOptionData").val());
                strHTML += '<div class="form-group">'
                strHTML += '<select class="form-control" name="TradeStatus" style="border:1px solid;width:118px">';
                strHTML += '<option value = ""> --Select--</option>';

                for (var i = 0; i < tradeStatusObj.length; i++) 
                {
                    if (tradeStatusObj[i].value == val) 
                    {
                        strHTML += '<option value = "' + tradeStatusObj[i].value + '" selected>' + tradeStatusObj[i].text + '</option>';
                    }
                    else
                    {
                        strHTML += '<option value = "' + tradeStatusObj[i].value + '">' + tradeStatusObj[i].text + '</option>';
                    }
                }
                strHTML += '</select>';
                strHTML += '</div>';
                
            }
            else if (name == "Logo") {
                var logoPath = window.location.origin + val;
                strHTML += '<image src="' + logoPath + '" name="' + name + '" alt="' + val + '" style="width:100px;height:100px;"><br/>';
                strHTML += '<div class="custom-file form-group" style="width:130px">'
                strHTML += '<input type="file" name="' + name + '_FileUpload" class="custom-file-input" onchange="uploadFile_onChange(this);">';
                strHTML += '<label class="custom-file-label" style="text-align:left" for="file">Upload</label>';
                strHTML += '</div>';
            }
            else
            {
                strHTML += '<div class="form-group">'
                strHTML += '<input id="" name="' + name + '" value="' + val + '" class="form-control">';
	            strHTML += '</div>';
            }
            return strHTML;
        }

        function GetTradeStatusData() {
            $.ajax({
                async: false,
                type: "POST",
                url: 'GetTradeStatus',
                dataType: 'json',
                data: {},
                success: function (response) {
                    $("#hdnTradeStatusOptionData").val(JSON.stringify(response));
                    //strHTML += '<select class="form-control"  style="border:1px solid;width:118px">';
                    //strHTML += '<option value = ""> --Select--</option>';
                    //for (var i = 0; i < response.length; i++) 
                    //{
                    //    strHTML += '<option value = "'+ response[i].value + '">"'+ response[i].text + '"</option>';
                    //}
                    //strHTML += '</select>';
                     
                    //if (defaultVal != "") {
                    //    $(this).val(defaultVal);
                    //}
                },
                error: function (errorTemp) {
                    console.log('error', errorTemp);
                }
            })
        }

        function uploadFile_onChange(input) {
            if (input.files && input.files[0]) {
                //var reader = new FileReader();

                //reader.onload = function (e) {
                //    $(input).parent().parent().find('image[name="Logo"]').attr('src', e.target.result).width(120).height(150);
                //};

                //reader.readAsDataURL(input.files[0]);
                var fileName = input.files[0].name;
                $(input).next('.custom-file-label').html(fileName);
            }
        }
        function SaveSpecificatonRuleInstrument(SaveObj, id, instrumentId) {
	
		    var rulesInstrument = [];
	        var rowObj = $(SaveObj).parent().parent("tr");
            
            var TradeStatusText = "";
            var TradeStatusValue = 0;
            if ($(rowObj).find("select[name='TradeStatus']").val()!="")
            {
                TradeStatusText = $(rowObj).find("select[name='TradeStatus'] option:selected").text().trim();
                TradeStatusValue = $(rowObj).find("select[name='TradeStatus']").val();
            }
		    var obj = {

			        MasterInstrumentId: $(rowObj).find("input[name='InstrumentId']").val(),
			        SymbolGroupId: $(rowObj).find("input[name='SymbolGroupId']").val(),
			        TradeId: TradeStatusValue,
			        QTFrom: $(rowObj).find("input[name='QtFrom']").val(),
			        QTTo: $(rowObj).find("input[name='QtTo']").val(),
			        TTFrom: $(rowObj).find("input[name='TtFrom']").val(),
			        TTTo: $(rowObj).find("input[name='TTo']").val(),
			        SymbolDenomination: $(rowObj).find("input[name='SymbolDenomination']").val(),
                    TradeStatus: TradeStatusText,
			        AverageSpread: $(rowObj).find("input[name='AverageSpread']").val(),
			        Decimals: $(rowObj).find("input[name='Decimals']").val(),
			        UnitDescription: $(rowObj).find("input[name='UnitDescription']").val(),
			        ZerosToBeGrouped: $(rowObj).find("input[name='ZerosToBeGrouped']").val(),
		    }
	                rulesInstrument.push(obj);
	                $("#instrumentData").val(JSON.stringify(rulesInstrument));
            
                    $("#Loader").show();
	                SaveRulesCondiDtl();
	                //SaveInstrumentDataDtl();
	                var formData = new FormData();
	                formData.append("Id", $("#Id").val());
	                formData.append("Comment", $("#Comment").val());
	                formData.append("Priority", $("#Priority").val());
	                formData.append("objRuleConditionViewModelstr", $("#rulesCondtionData").val());
	                formData.append("objRuleInstrumentViewModelstr", $("#instrumentData").val());
	                formData.append('logoUploader', $(rowObj).find('input[name="Logo_FileUpload"]')[0].files[0]);

	                $.ajax({
		            type: "POST",
		            url: 'UpdateSpecificationRule',
		            data: formData,
		            contentType: false,
		            processData: false,
		            success: function (res) {
                                $("#Loader").hide();
			            if (res.statusCode == 200) {
				
				            NotifyMsg('success', res.message);
                                    InstrumentDataTable.init();

			            } else {
				            NotifyMsg('error', res.message);
			            }
		            },
		            error: function (errorTemp) {
			            NotifyMsg('error', errorTemp);
			            console.log('error', errorTemp);
		            }
	            })
    }

         function ExportSepecificationRuleData(Id) {
                debugger;
            updateProgress(0);
            var table1 = $('#instrumentData tr').length;

            $("#ProcessModal").modal({ backdrop: 'static', keyboard: false });
            $("#ProcessModal").focus();
            $("#ProcessModal").modal('show');

            var totalCnt = table1;//.fnSettings().fnRecordsTotal()
            var counter = totalCnt / 100;
            counter = Math.round(counter);
            var intervalId = window.setInterval(function () {
                if (counter < 90) {
                    updateProgress(counter);
                    counter = counter + 7;
                }
            }, 50);

                // $('#Loader').show();
                $.ajax({
                    type: "POST",
                    url: '/ImportInstruments/ExportInstrumentExcel?RuleId=' + Id,
                    //contentType: false,
                    dataType: "binary",
                    processData: false,
                    xhrFields: {
                        'responseType': 'blob'
                    },
                    success: function (res) {
                        debugger
                        const date = new Date();
                        let day = date.getDate();
                        let month = date.getMonth() + 1;
                        let year = date.getFullYear();
                        let currentDate = `${day}_${month}_${year}`;
                          $("#ProcessModal").modal("hide");
                               clearInterval(intervalId);
                  
                        NotifyMsg('success', 'The file is exported');
                        var link = document.createElement('a'),
                        filename = "SpecificationRuleInstrument_" + currentDate + ".xlsx";
                        link.href = URL.createObjectURL(res);
                        link.download = filename;
                        link.click();
                    completeHandler();
                       // $('#Loader').hide();
                    },
                    error: function (errorTemp) {
                        NotifyMsg('error', errorTemp);
                        console.log('error', errorTemp);
                    $('#Loader').hide();
                    }
                })
            }

        function updateProgress(count) {
            $('.bar').css('width', count + '%');
            $('.percent').text(count + '%');
        }
        function completeHandler() {
            $('.bar').width("100%");
            $('.percent').html("100%");
            $("#ProcessModal").modal('hide');
        }


    </script>
 }

